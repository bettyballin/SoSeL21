package SoSeL21.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class Statement {
  public static SNode Statement = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"));
  public static SNode myStatement;
  private List<String> results;

  public Statement(SNode s) {
    myStatement = SNodeOperations.copyNode(s);
    results = ListSequence.fromList(new ArrayList<String>());
  }

  public String getResult() {
    getValue(myStatement);
    return IterableUtils.join(ListSequence.fromList(results), ",");
  }

  private void getValue(SNode stmt) {
    if (SNodeOperations.getConcept(stmt).getConceptAlias() == "if") {
      SNode i = (SNode) stmt;
      Expression e = new Expression(SLinkOperations.getTarget(i, LINKS.cond$u4XA));
      String expResult = e.getResult();
      if (Boolean.parseBoolean(expResult)) {
        parseBody(SLinkOperations.getChildren(i, LINKS.body$FgR_));
      } else {
        if ((SLinkOperations.getTarget(i, LINKS.else$IzMC) != null)) {
          SNode el = SLinkOperations.getTarget(i, LINKS.else$IzMC);
          while ((el != null)) {
            if (SNodeOperations.getConcept(el).getConceptAlias() == "elseif") {
              Expression eElse = new Expression(SLinkOperations.getTarget(el, LINKS.cond$KSaJ));
              String condResult = eElse.getResult();
              if (Boolean.parseBoolean(condResult)) {
                parseBody(SLinkOperations.getChildren(el, LINKS.body$n5xF));
                el = null;
              } else {
                el = (SNode) SLinkOperations.getTarget(el, LINKS.else$5q1R);
              }
            } else {
              parseBody(SLinkOperations.getChildren(el, LINKS.body$n5xF));
              el = null;
            }
          }
        }
      }

    } else if (SNodeOperations.getConcept(stmt).getConceptAlias() == "while") {
      SNode w = (SNode) stmt;
      String wResult = "false";
      int stopIter = 0;
      do {
        Expression e = new Expression(SLinkOperations.getTarget(w, LINKS.cond$VSgw));
        wResult = e.getResult();
        parseBody(SLinkOperations.getChildren(w, LINKS.body$VSvx));
        stopIter++;
      } while (Boolean.parseBoolean(wResult) && stopIter < 10);
      if (stopIter == 10) {
        ListSequence.fromList(results).addElement("...");
      }
    } else if (SNodeOperations.getConcept(stmt).getConceptAlias() == "for") {
      SNode f = (SNode) stmt;
      Expression e = new Expression(SLinkOperations.getTarget(f, LINKS.cond$9ST8));
      if (Boolean.parseBoolean(e.getResult())) {
        parseBody(SLinkOperations.getChildren(f, LINKS.body$GjHB));
      }
    } else if (SNodeOperations.getConcept(stmt).getConceptAlias() == "fun") {
    }

  }

  private void parseBody(Iterable<SNode> body) {
    for (SNode b : Sequence.fromIterable(body)) {
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(b)), CONCEPTS.ExpressionStatement$ok)) {
        SNode e2 = (SNode) b;
        Expression exp = new Expression(SLinkOperations.getTarget(e2, LINKS.exp$S2fA));
        String val = exp.getResult();
        ListSequence.fromList(results).addElement(val);
      } else if (SNodeOperations.getConcept(b).getConceptAlias() == "if") {
        SNode i = (SNode) b;
        Statement s = new Statement(i);
        String val = s.getResult();
        ListSequence.fromList(results).addElement(val);
      } else if (SNodeOperations.getConcept(b).getConceptAlias() == "while") {
        SNode w = (SNode) b;
        Statement s = new Statement(w);
        String val = s.getResult();
        ListSequence.fromList(results).addElement(val);
      } else if (SNodeOperations.getConcept(b).getConceptAlias() == "for") {
        SNode f = (SNode) b;
        Statement s = new Statement(f);
        String val = s.getResult();
        ListSequence.fromList(results).addElement(val);
      }
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink cond$u4XA = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c8da65eL, 0x3d238acb0c8da661L, "cond");
    /*package*/ static final SContainmentLink body$FgR_ = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c8da65eL, 0x3d238acb0c8da6adL, "body");
    /*package*/ static final SContainmentLink else$IzMC = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c8da65eL, 0x3d238acb0c8da6fdL, "else");
    /*package*/ static final SContainmentLink cond$KSaJ = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c98656fL, 0x3d238acb0ccce40bL, "cond");
    /*package*/ static final SContainmentLink body$n5xF = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x6a52f87ccbfc3d36L, 0x6a52f87ccbfc3d3eL, "body");
    /*package*/ static final SContainmentLink else$5q1R = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c98656fL, 0x6a52f87ccbe8cb20L, "else");
    /*package*/ static final SContainmentLink cond$VSgw = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x65891563316baffbL, 0x65891563316bb368L, "cond");
    /*package*/ static final SContainmentLink body$VSvx = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x65891563316baffbL, 0x65891563316bb369L, "body");
    /*package*/ static final SContainmentLink cond$9ST8 = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x658915633179ff0dL, 0x658915633179ff12L, "cond");
    /*package*/ static final SContainmentLink body$GjHB = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x658915633179ff0dL, 0x65891563317a01bbL, "body");
    /*package*/ static final SContainmentLink exp$S2fA = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254c57fcL, 0x7f8c5814254c57ffL, "exp");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ExpressionStatement$ok = MetaAdapterFactory.getConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254c57fcL, "SoSeL21.structure.ExpressionStatement");
  }
}
