package SoSeL21.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SNodeUtil;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class IfStatement {
  private static final Logger LOG = LogManager.getLogger(IfStatement.class);
  public static SNode Statement = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"));
  public static SNode myStatement;
  private List<String> results;

  public IfStatement(SNode s) {
    myStatement = SNodeOperations.copyNode(s);
    results = ListSequence.fromList(new ArrayList<String>());
  }

  public String getResult() {
    getValue(myStatement);
    return IterableUtils.join(ListSequence.fromList(results), ",");
  }

  private void getValue(SNode stmt) {
    Expression e = new Expression(SLinkOperations.getTarget(stmt, LINKS.cond$u4XA));
    String expResult = e.getResult();
    if (Boolean.parseBoolean(expResult)) {
      LoggingRuntime.logMsgView(Level.INFO, "if is true", IfStatement.class, null, null);
      parseBody(SLinkOperations.getChildren(stmt, LINKS.body$FgR_));
    } else {
      if ((SLinkOperations.getTarget(stmt, LINKS.else$IzMC) != null)) {
        SNode el = SLinkOperations.getTarget(stmt, LINKS.else$IzMC);
        while ((el != null)) {
          if (SNodeOperations.getConcept(SLinkOperations.getTarget(stmt, LINKS.else$IzMC)).getConceptAlias() == "elseif") {
            Expression eElse = new Expression(SLinkOperations.getTarget(el, LINKS.cond$KSaJ));
            String condResult = eElse.getResult();
            LoggingRuntime.logMsgView(Level.INFO, "elseif cond: " + condResult, IfStatement.class, null, null);
            if (Boolean.parseBoolean(condResult)) {
              parseBody(SLinkOperations.getChildren(el, LINKS.body$n5xF));
            } else {
              el = SLinkOperations.getTarget(el, LINKS.else$5q1R);
            }
          } else {
            LoggingRuntime.logMsgView(Level.INFO, "else cond true ", IfStatement.class, null, null);
            parseBody(SLinkOperations.getChildren(el, LINKS.body$n5xF));
          }
        }
      }
    }
  }

  private void parseBody(Iterable<SNode> body) {
    for (SNode b : Sequence.fromIterable(body)) {
      LoggingRuntime.logMsgView(Level.INFO, " " + SNodeUtil.getPresentation(b), IfStatement.class, null, null);
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(b)), CONCEPTS.ExpressionStatement$ok)) {
        SNode e2 = (SNode) b;
        Expression exp = new Expression(SLinkOperations.getTarget(e2, LINKS.exp$S2fA));
        String val = exp.getResult();
        LoggingRuntime.logMsgView(Level.INFO, "val: " + val, IfStatement.class, null, null);
        ListSequence.fromList(results).addElement(val);
      } else if (SNodeOperations.getConcept(b).getConceptAlias() == "if") {
        SNode i = (SNode) b;
        IfStatement s = new IfStatement(i);
        String val = s.getResult();
        LoggingRuntime.logMsgView(Level.INFO, "if val: " + val, IfStatement.class, null, null);
        ListSequence.fromList(results).addElement(val);
      }
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink cond$u4XA = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c8da65eL, 0x3d238acb0c8da661L, "cond");
    /*package*/ static final SContainmentLink body$FgR_ = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c8da65eL, 0x3d238acb0c8da6adL, "body");
    /*package*/ static final SContainmentLink else$IzMC = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c8da65eL, 0x3d238acb0c8da6fdL, "else");
    /*package*/ static final SContainmentLink cond$KSaJ = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c98656fL, 0x3d238acb0ccce40bL, "cond");
    /*package*/ static final SContainmentLink body$n5xF = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x6a52f87ccbfc3d36L, 0x6a52f87ccbfc3d3eL, "body");
    /*package*/ static final SContainmentLink else$5q1R = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c98656fL, 0x6a52f87ccbe8cb20L, "else");
    /*package*/ static final SContainmentLink exp$S2fA = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254c57fcL, 0x7f8c5814254c57ffL, "exp");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ExpressionStatement$ok = MetaAdapterFactory.getConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254c57fcL, "SoSeL21.structure.ExpressionStatement");
  }
}
