package SoSeL21.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.smodel.SNodeUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public final class SoSeWorksheet__BehaviorDescriptor extends BaseBHDescriptor {
  private static final Logger LOG = LogManager.getLogger(SoSeWorksheet__BehaviorDescriptor.class);
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3538d07f0ac55237L, "SoSeL21.structure.SoSeWorksheet");

  public static final SMethod<Iterable<SNode>> vars_id7Ycm1g_jZLT = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("vars").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7Ycm1g_jZLT").build();
  public static final SMethod<Iterable<SNode>> stmts_id2DJNjyWk4$y = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("stmts").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2DJNjyWk4$y").build();
  public static final SMethod<String[]> checkValidReferences_id6m95mcM8pCU = new SMethodBuilder<String[]>(new SJavaCompoundTypeImpl(String[].class)).name("checkValidReferences").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6m95mcM8pCU").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(vars_id7Ycm1g_jZLT, stmts_id2DJNjyWk4$y, checkValidReferences_id6m95mcM8pCU);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Iterable<SNode> vars_id7Ycm1g_jZLT(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.contents$K0QA), CONCEPTS.VariableDeclaration$j6);
  }
  /*package*/ static Iterable<SNode> stmts_id2DJNjyWk4$y(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.contents$K0QA), CONCEPTS.Statement$k5);
  }
  /*package*/ static String[] checkValidReferences_id6m95mcM8pCU(@NotNull SNode __thisNode__) {
    List<SNode> stmts = Sequence.fromIterable(SoSeWorksheet__BehaviorDescriptor.stmts_id2DJNjyWk4$y.invoke(__thisNode__)).toListSequence();
    String[] declarations = new String[stmts.size()];
    String[] checks = new String[stmts.size()];

    for (int i = 0; i < stmts.size(); i++) {
      if (SNodeOperations.getConcept(ListSequence.fromList(stmts).getElement(i)).getConceptAlias() == "expression") {
        SNode e = (SNode) ListSequence.fromList(stmts).getElement(i);
        if (SNodeOperations.getConcept(SLinkOperations.getTarget(e, LINKS.exp$S2fA)).getConceptAlias() == "ref") {
          SNode ref = (SNode) SLinkOperations.getTarget(e, LINKS.exp$S2fA);
          LoggingRuntime.logMsgView(Level.INFO, "ref: " + i, SoSeWorksheet__BehaviorDescriptor.class, null, null);
          LoggingRuntime.logMsgView(Level.INFO, "ref target: " + SNodeUtil.getPresentation(SLinkOperations.getTarget(ref, LINKS.target$tH9_)), SoSeWorksheet__BehaviorDescriptor.class, null, null);
          LoggingRuntime.logMsgView(Level.INFO, "declaration contains it: " + Sequence.fromIterable(Sequence.fromArray(declarations)).contains(SPropertyOperations.getString(SLinkOperations.getTarget(ref, LINKS.target$tH9_), PROPS.name$MnvL)), SoSeWorksheet__BehaviorDescriptor.class, null, null);
          LoggingRuntime.logMsgView(Level.INFO, "declarations: " + IterableUtils.join(Sequence.fromIterable(Sequence.fromArray(declarations)).toListSequence(), " "), SoSeWorksheet__BehaviorDescriptor.class, null, null);

          if (!((Sequence.fromIterable(Sequence.fromArray(declarations)).contains(SPropertyOperations.getString(SLinkOperations.getTarget(ref, LINKS.target$tH9_), PROPS.name$MnvL))))) {
            checks[i] = SPropertyOperations.getString(SLinkOperations.getTarget(ref, LINKS.target$tH9_), PROPS.name$MnvL);
          }
        }
      } else if (SNodeOperations.getConcept(ListSequence.fromList(stmts).getElement(i)).getConceptAlias() == "declaration") {
        declarations[i] = SPropertyOperations.getString(((SNode) ListSequence.fromList(stmts).getElement(i)), PROPS.name$MnvL);
      }
    }
    return checks;
  }

  /*package*/ SoSeWorksheet__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Iterable<SNode>) vars_id7Ycm1g_jZLT(node));
      case 1:
        return (T) ((Iterable<SNode>) stmts_id2DJNjyWk4$y(node));
      case 2:
        return (T) ((String[]) checkValidReferences_id6m95mcM8pCU(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink contents$K0QA = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3538d07f0ac55237L, 0x3538d07f0ac5523aL, "contents");
    /*package*/ static final SContainmentLink exp$S2fA = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254c57fcL, 0x7f8c5814254c57ffL, "exp");
    /*package*/ static final SReferenceLink target$tH9_ = MetaAdapterFactory.getReferenceLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3538d07f0ac5551eL, 0x3538d07f0ac55607L, "target");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept VariableDeclaration$j6 = MetaAdapterFactory.getConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254c582bL, "SoSeL21.structure.VariableDeclaration");
    /*package*/ static final SInterfaceConcept Statement$k5 = MetaAdapterFactory.getInterfaceConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3538d07f0ac55234L, "SoSeL21.structure.Statement");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
