package SoSeL21.editor;

/*Generated by MPS */

import com.mbeddr.mpsutil.grammarcells.runtime.AbstractGrammarActionDescriptor;
import com.mbeddr.mpsutil.grammarcells.runtime.IGrammarActionsDescriptor;
import java.util.List;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.mbeddr.mpsutil.grammarcells.runtime.GrammarCellsUtil;
import org.jetbrains.mps.openapi.language.SConcept;
import com.mbeddr.mpsutil.grammarcells.runtime.menu.GrammarCellsSubstituteMenuItem;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuLookup;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.editor.menus.substitute.ReferenceScopeSubstituteMenuItem;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.editor.menus.substitute.SubstituteMenuItemWrapper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import com.mbeddr.mpsutil.grammarcells.runtime.Parser;
import com.mbeddr.mpsutil.grammarcells.runtime.menu.GrammarCellsSideTransformTransformationMenuItem;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.editor.runtime.cells.CellIdManager;
import com.mbeddr.mpsutil.grammarcells.runtime.SavedCaretPosition;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.constraints.ConstraintsCanBeFacade;
import jetbrains.mps.core.aspects.constraints.rules.kinds.ContainmentContext;
import com.mbeddr.mpsutil.grammarcells.runtime.MultiTextActionItem;
import jetbrains.mps.smodel.presentation.NodePresentationUtil;
import java.util.Collections;
import jetbrains.mps.lang.editor.menus.transformation.SubstituteItemsCollector;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import com.mbeddr.mpsutil.grammarcells.runtime.IToken;
import com.mbeddr.mpsutil.grammarcells.runtime.ISymbol;
import com.mbeddr.mpsutil.grammarcells.runtime.ChildSymbol;
import com.mbeddr.mpsutil.grammarcells.runtime.SyntaxMatcher;
import com.mbeddr.mpsutil.grammarcells.runtime.MultiTextSubsituteAction;
import com.mbeddr.mpsutil.grammarcells.runtime.IRule;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.Set;
import org.jetbrains.mps.openapi.language.SLanguage;
import com.mbeddr.mpsutil.grammarcells.runtime.AbstractRule;
import com.mbeddr.mpsutil.grammarcells.runtime.PropertySymbol;
import com.mbeddr.mpsutil.grammarcells.runtime.ConstantSymbol;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class GrammarActionsDescriptor extends AbstractGrammarActionDescriptor implements IGrammarActionsDescriptor {

  public static final GrammarActionsDescriptor INSTANCE = new GrammarActionsDescriptor();

  @Override
  public List<SubstituteMenuItem> getActions(final SubstituteMenuContext _context, final SAbstractConcept expectedOutputConceptExactly) {
    final List<SubstituteMenuItem> result = ListSequence.fromList(new ArrayList<SubstituteMenuItem>());

    _context.getEditorMenuTrace().pushTraceInfo();
    _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("SoSeL21.editor.GrammarActionsDescriptor.getActions", null));
    try {
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
        public Iterable<SubstituteMenuItem> query() {
          List<SubstituteMenuItem> result = ListSequence.fromList(new ArrayList<SubstituteMenuItem>());
          _context.getEditorMenuTrace().pushTraceInfo();
          _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.wrap in " + "NumberLiteral", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "6768435242314744953")));
          try {
            if (SConceptOperations.isExactly(SNodeOperations.asSConcept(expectedOutputConceptExactly), CONCEPTS.NumberLiteral$kL)) {
              final SAbstractConcept expectedOutputConcept = GrammarCellsUtil.getExpectedOutputConcept(_context, expectedOutputConceptExactly);

              for (SConcept subconcept : ListSequence.fromList(GrammarCellsUtil.getVisibleSubconceptsNonAbstract(CONCEPTS.NumberLiteral$kL, _context.getModel(), NumberLiteral_Editor.class, _context.getEditorContext()))) {
                final SConcept outputConcept = ((SConcept) subconcept);

                if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(outputConcept), SNodeOperations.asSConcept(expectedOutputConcept))) {
                  boolean isApplicable = GrammarCellsUtil.canBeChild(subconcept, _context);
                  if (isApplicable) {
                    ListSequence.fromList(result).addElement(new GrammarCellsSubstituteMenuItem(_context) {
                      private SProperty myProperty = PROPS.value$qBvE;

                      public String getMatchingText(String pattern) {
                        return pattern;
                      }
                      @Override
                      public boolean canExecute(@NotNull String pattern) {
                        if ((pattern == null || pattern.length() == 0)) {
                          return false;
                        }
                        return GrammarCellsUtil.isValidPropertyValue(myProperty, expectedOutputConceptExactly, pattern);
                      }
                      @Override
                      public boolean canExecuteStrictly(@NotNull String pattern) {
                        return canExecute(pattern);
                      }

                      @Override
                      public SNode createNode(@NotNull String pattern) {
                        SNode newNode = SNodeFactoryOperations.createNewNode(expectedOutputConceptExactly, null);
                        SPropertyOperations.assign(newNode, PROPS.value$qBvE, GrammarCellsUtil.toInternalPropertyValue(myProperty, pattern));

                        return newNode;
                      }


                      @Override
                      public void select(@NotNull SNode newNode, @NotNull String pattern) {
                        super.select(newNode, pattern);
                      }

                      @Override
                      public SAbstractConcept getOutputConcept() {
                        return CONCEPTS.NumberLiteral$kL;
                      }
                    });
                  }
                }

              }
            }
          } finally {
            _context.getEditorMenuTrace().popTraceInfo();
          }
          return ListSequence.fromList(result).where(new IWhereFilter<SubstituteMenuItem>() {
            public boolean accept(SubstituteMenuItem it) {
              return it != null;
            }
          }).toListSequence();
        }
      }.query()));
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
        public Iterable<SubstituteMenuItem> query() {
          List<SubstituteMenuItem> result = ListSequence.fromList(new ArrayList<SubstituteMenuItem>());
          _context.getEditorMenuTrace().pushTraceInfo();
          _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.wrap in " + "BinaryExpression", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "6768435242314269968")));
          try {
            if (SConceptOperations.isExactly(SNodeOperations.asSConcept(expectedOutputConceptExactly), CONCEPTS.BinaryExpression$$Q)) {
              final SAbstractConcept wrappedConcept = CONCEPTS.MyExpression$hK;
              for (SConcept subconcept : ListSequence.fromList(GrammarCellsUtil.getVisibleSubconceptsNonAbstract(CONCEPTS.BinaryExpression$$Q, _context.getModel(), BinaryExpression_Editor.class, _context.getEditorContext()))) {
                final SConcept outputConcept = ((SConcept) subconcept);

                final SAbstractConcept expectedOutputConcept = GrammarCellsUtil.getExpectedOutputConcept(_context, expectedOutputConceptExactly);

                boolean wrapRequired = !(SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(wrappedConcept), SNodeOperations.asSConcept(expectedOutputConcept)));
                if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(outputConcept), SNodeOperations.asSConcept(expectedOutputConcept)) && wrapRequired) {

                  boolean isApplicable = GrammarCellsUtil.canBeChild(subconcept, _context);
                  if (isApplicable) {
                    List<SubstituteMenuItem> actions = _context.withLink(LINKS.left$6HrV).createItems(new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(_context.getEditorContext().getRepository()), wrappedConcept));
                    List<SubstituteMenuItem> wrappedActions = ListSequence.fromList(actions).where(new IWhereFilter<SubstituteMenuItem>() {
                      public boolean accept(SubstituteMenuItem it) {
                        boolean isApplicable = true;
                        final SAbstractConcept wrappedConcept = it.getOutputConcept();
                        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(wrappedConcept), SNodeOperations.asSConcept(expectedOutputConcept))) {
                          return false;
                        }
                        final EditorContext editorContext = _context.getEditorContext();
                        final SNode smartReferent = ((it instanceof ReferenceScopeSubstituteMenuItem) ? ((SNode) ReflectionUtil_copy.readField(ReferenceScopeSubstituteMenuItem.class, ((ReferenceScopeSubstituteMenuItem) it), "myReferent")) : null);

                        return isApplicable;
                      }
                    }).select(new ISelector<SubstituteMenuItem, SubstituteMenuItem>() {
                      public SubstituteMenuItem select(SubstituteMenuItem it) {
                        final SNode smartReferent = ((it instanceof ReferenceScopeSubstituteMenuItem) ? ((SNode) ReflectionUtil_copy.readField(ReferenceScopeSubstituteMenuItem.class, ((ReferenceScopeSubstituteMenuItem) it), "myReferent")) : null);

                        SubstituteMenuItem wrapper = new SubstituteMenuItemWrapper(it) {
                          private SNode wrappedNode;
                          @Override
                          public SNode createNode(@NotNull String pattern) {
                            SNode nodeToWrap = super.createNode(pattern);
                            wrappedNode = nodeToWrap;
                            // use setupNode after setting wrapped element to allow access to the wrapped element in node factories 
                            SNode wrapper = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(outputConcept));
                            SLinkOperations.setTarget(wrapper, LINKS.left$6HrV, SNodeOperations.cast(nodeToWrap, CONCEPTS.MyExpression$hK));
                            NodeFactoryManager.setupNode(outputConcept, wrapper, _context.getCurrentTargetNode(), _context.getParentNode(), _context.getModel());

                            return wrapper;
                          }
                          @Override
                          public SAbstractConcept getOutputConcept() {
                            return outputConcept;
                          }

                          @Override
                          public void select(@NotNull SNode createdNode, @NotNull String pattern) {
                            GrammarCellsSubstituteMenuItem.select(_context.getEditorContext().getEditorComponent(), createdNode);
                          }
                        };
                        return wrapper;
                      }
                    }).toListSequence();

                    ListSequence.fromList(result).addSequence(ListSequence.fromList(wrappedActions));
                  }

                }
              }
            }
          } finally {
            _context.getEditorMenuTrace().popTraceInfo();
          }
          return ListSequence.fromList(result).where(new IWhereFilter<SubstituteMenuItem>() {
            public boolean accept(SubstituteMenuItem it) {
              return it != null;
            }
          }).toListSequence();
        }
      }.query()));
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
        public Iterable<SubstituteMenuItem> query() {
          List<SubstituteMenuItem> result = ListSequence.fromList(new ArrayList<SubstituteMenuItem>());
          _context.getEditorMenuTrace().pushTraceInfo();
          _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.wrap in " + "BinaryExpression", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "6768435242314270307")));
          try {
            if (SConceptOperations.isExactly(SNodeOperations.asSConcept(expectedOutputConceptExactly), CONCEPTS.BinaryExpression$$Q)) {
              final SAbstractConcept wrappedConcept = CONCEPTS.MyExpression$hK;
              for (SConcept subconcept : ListSequence.fromList(GrammarCellsUtil.getVisibleSubconceptsNonAbstract(CONCEPTS.BinaryExpression$$Q, _context.getModel(), BinaryExpression_Editor.class, _context.getEditorContext()))) {
                final SConcept outputConcept = ((SConcept) subconcept);

                final SAbstractConcept expectedOutputConcept = GrammarCellsUtil.getExpectedOutputConcept(_context, expectedOutputConceptExactly);

                boolean wrapRequired = !(SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(wrappedConcept), SNodeOperations.asSConcept(expectedOutputConcept)));
                if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(outputConcept), SNodeOperations.asSConcept(expectedOutputConcept)) && wrapRequired) {

                  boolean isApplicable = GrammarCellsUtil.canBeChild(subconcept, _context);
                  if (isApplicable) {
                    List<SubstituteMenuItem> actions = _context.withLink(LINKS.right$4iAC).createItems(new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(_context.getEditorContext().getRepository()), wrappedConcept));
                    List<SubstituteMenuItem> wrappedActions = ListSequence.fromList(actions).where(new IWhereFilter<SubstituteMenuItem>() {
                      public boolean accept(SubstituteMenuItem it) {
                        boolean isApplicable = true;
                        final SAbstractConcept wrappedConcept = it.getOutputConcept();
                        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(wrappedConcept), SNodeOperations.asSConcept(expectedOutputConcept))) {
                          return false;
                        }
                        final EditorContext editorContext = _context.getEditorContext();
                        final SNode smartReferent = ((it instanceof ReferenceScopeSubstituteMenuItem) ? ((SNode) ReflectionUtil_copy.readField(ReferenceScopeSubstituteMenuItem.class, ((ReferenceScopeSubstituteMenuItem) it), "myReferent")) : null);

                        return isApplicable;
                      }
                    }).select(new ISelector<SubstituteMenuItem, SubstituteMenuItem>() {
                      public SubstituteMenuItem select(SubstituteMenuItem it) {
                        final SNode smartReferent = ((it instanceof ReferenceScopeSubstituteMenuItem) ? ((SNode) ReflectionUtil_copy.readField(ReferenceScopeSubstituteMenuItem.class, ((ReferenceScopeSubstituteMenuItem) it), "myReferent")) : null);

                        SubstituteMenuItem wrapper = new SubstituteMenuItemWrapper(it) {
                          private SNode wrappedNode;
                          @Override
                          public SNode createNode(@NotNull String pattern) {
                            SNode nodeToWrap = super.createNode(pattern);
                            wrappedNode = nodeToWrap;
                            // use setupNode after setting wrapped element to allow access to the wrapped element in node factories 
                            SNode wrapper = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(outputConcept));
                            SLinkOperations.setTarget(wrapper, LINKS.right$4iAC, SNodeOperations.cast(nodeToWrap, CONCEPTS.MyExpression$hK));
                            NodeFactoryManager.setupNode(outputConcept, wrapper, _context.getCurrentTargetNode(), _context.getParentNode(), _context.getModel());

                            return wrapper;
                          }
                          @Override
                          public SAbstractConcept getOutputConcept() {
                            return outputConcept;
                          }

                          @Override
                          public void select(@NotNull SNode createdNode, @NotNull String pattern) {
                            GrammarCellsSubstituteMenuItem.select(_context.getEditorContext().getEditorComponent(), createdNode);
                          }
                        };
                        return wrapper;
                      }
                    }).toListSequence();

                    ListSequence.fromList(result).addSequence(ListSequence.fromList(wrappedActions));
                  }

                }
              }
            }
          } finally {
            _context.getEditorMenuTrace().popTraceInfo();
          }
          return ListSequence.fromList(result).where(new IWhereFilter<SubstituteMenuItem>() {
            public boolean accept(SubstituteMenuItem it) {
              return it != null;
            }
          }).toListSequence();
        }
      }.query()));
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
        public Iterable<SubstituteMenuItem> query() {
          List<SubstituteMenuItem> result = ListSequence.fromList(new ArrayList<SubstituteMenuItem>());
          _context.getEditorMenuTrace().pushTraceInfo();
          _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.wrap in " + "VariableDeclaration", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "1986727169827240901")));
          try {
            if (SConceptOperations.isExactly(SNodeOperations.asSConcept(expectedOutputConceptExactly), CONCEPTS.VariableDeclaration$j6)) {
              final SAbstractConcept wrappedConcept = CONCEPTS.Type$vA;
              for (SConcept subconcept : ListSequence.fromList(GrammarCellsUtil.getVisibleSubconceptsNonAbstract(CONCEPTS.VariableDeclaration$j6, _context.getModel(), VariableDeclaration_Editor.class, _context.getEditorContext()))) {
                final SConcept outputConcept = ((SConcept) subconcept);

                final SAbstractConcept expectedOutputConcept = GrammarCellsUtil.getExpectedOutputConcept(_context, expectedOutputConceptExactly);

                boolean wrapRequired = !(SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(wrappedConcept), SNodeOperations.asSConcept(expectedOutputConcept)));
                if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(outputConcept), SNodeOperations.asSConcept(expectedOutputConcept)) && wrapRequired) {

                  boolean isApplicable = GrammarCellsUtil.canBeChild(subconcept, _context);
                  if (isApplicable) {
                    List<SubstituteMenuItem> actions = _context.withLink(LINKS.type$Kukc).createItems(new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(_context.getEditorContext().getRepository()), wrappedConcept));
                    List<SubstituteMenuItem> wrappedActions = ListSequence.fromList(actions).where(new IWhereFilter<SubstituteMenuItem>() {
                      public boolean accept(SubstituteMenuItem it) {
                        boolean isApplicable = true;
                        final SAbstractConcept wrappedConcept = it.getOutputConcept();
                        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(wrappedConcept), SNodeOperations.asSConcept(expectedOutputConcept))) {
                          return false;
                        }
                        final EditorContext editorContext = _context.getEditorContext();
                        final SNode smartReferent = ((it instanceof ReferenceScopeSubstituteMenuItem) ? ((SNode) ReflectionUtil_copy.readField(ReferenceScopeSubstituteMenuItem.class, ((ReferenceScopeSubstituteMenuItem) it), "myReferent")) : null);

                        return isApplicable;
                      }
                    }).select(new ISelector<SubstituteMenuItem, SubstituteMenuItem>() {
                      public SubstituteMenuItem select(SubstituteMenuItem it) {
                        final SNode smartReferent = ((it instanceof ReferenceScopeSubstituteMenuItem) ? ((SNode) ReflectionUtil_copy.readField(ReferenceScopeSubstituteMenuItem.class, ((ReferenceScopeSubstituteMenuItem) it), "myReferent")) : null);

                        SubstituteMenuItem wrapper = new SubstituteMenuItemWrapper(it) {
                          private SNode wrappedNode;
                          @Override
                          public SNode createNode(@NotNull String pattern) {
                            SNode nodeToWrap = super.createNode(pattern);
                            wrappedNode = nodeToWrap;
                            // use setupNode after setting wrapped element to allow access to the wrapped element in node factories 
                            SNode wrapper = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(outputConcept));
                            SLinkOperations.setTarget(wrapper, LINKS.type$Kukc, SNodeOperations.cast(nodeToWrap, CONCEPTS.Type$vA));
                            NodeFactoryManager.setupNode(outputConcept, wrapper, _context.getCurrentTargetNode(), _context.getParentNode(), _context.getModel());

                            return wrapper;
                          }
                          @Override
                          public SAbstractConcept getOutputConcept() {
                            return outputConcept;
                          }

                          @Override
                          public void select(@NotNull SNode createdNode, @NotNull String pattern) {
                            GrammarCellsSubstituteMenuItem.select(_context.getEditorContext().getEditorComponent(), createdNode);
                          }
                        };
                        return wrapper;
                      }
                    }).toListSequence();

                    ListSequence.fromList(result).addSequence(ListSequence.fromList(wrappedActions));
                  }

                }
              }
            }
          } finally {
            _context.getEditorMenuTrace().popTraceInfo();
          }
          return ListSequence.fromList(result).where(new IWhereFilter<SubstituteMenuItem>() {
            public boolean accept(SubstituteMenuItem it) {
              return it != null;
            }
          }).toListSequence();
        }
      }.query()));
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
        public Iterable<SubstituteMenuItem> query() {
          List<SubstituteMenuItem> result = ListSequence.fromList(new ArrayList<SubstituteMenuItem>());
          _context.getEditorMenuTrace().pushTraceInfo();
          _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.wrap in " + "Type", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "1986727169827462157")));
          try {
          } finally {
            _context.getEditorMenuTrace().popTraceInfo();
          }
          return ListSequence.fromList(result).where(new IWhereFilter<SubstituteMenuItem>() {
            public boolean accept(SubstituteMenuItem it) {
              return it != null;
            }
          }).toListSequence();
        }
      }.query()));
    } finally {
      _context.getEditorMenuTrace().popTraceInfo();
    }

    return ListSequence.fromList(result).where(new IWhereFilter<SubstituteMenuItem>() {
      public boolean accept(SubstituteMenuItem it) {
        return it != null;
      }
    }).toListSequence();
  }

  @Override
  protected List<TransformationMenuItem> doGetSideTransformActions(final TransformationMenuContext _context) {
    final List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());

    _context.getEditorMenuTrace().pushTraceInfo();
    _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("SoSeL21.editor.GrammarActionsDescriptor.doGetSideTransformActions", null));
    try {
      {
        boolean sideEnabled = false;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM;
        if (sideEnabled) {
          ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
            public Iterable<TransformationMenuItem> query(final TransformationMenuContext _context) {
              List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
              _context.getEditorMenuTrace().pushTraceInfo();
              _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.wrap in " + "NumberLiteral", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "6768435242314744953")));
              try {
              } finally {
                _context.getEditorMenuTrace().popTraceInfo();
              }
              return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
                public boolean accept(TransformationMenuItem it) {
                  return it != null;
                }
              }).toListSequence();
            }
          }.query(_context)));
        }
      }
      {
        boolean sideEnabled = false;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM;
        if (sideEnabled) {
          ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
            public Iterable<TransformationMenuItem> query(final TransformationMenuContext _context) {
              _context.getEditorMenuTrace().pushTraceInfo();
              _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.brackets in " + "ParensExpression", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "6768435242314968123")));
              try {
                List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
                {
                  final SNode sourceNode = new Parser(_context.getModel()).isEndOf(_context.getNode(), _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM, CONCEPTS.MyExpression$hK, null);
                  if (sourceNode != null) {
                    ListSequence.fromList(result).addElement(new GrammarCellsSideTransformTransformationMenuItem(_context) {
                      public String getDescriptionText(String string) {
                        return "ParensExpression";
                      }
                      public String getMatchingText(String pattern) {
                        return (_context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM ? "(" : ")");
                      }
                      @Override
                      public void execute(@NotNull String pattern) {
                        doSubstitute(_context.getEditorContext(), pattern);
                      }
                      protected SNode doSubstitute(@Nullable EditorContext editorContext, String pattern) {
                        SNode annotation = SNodeFactoryOperations.addNewAttribute(sourceNode, new IAttributeDescriptor.NodeAttribute(CONCEPTS.ArbitraryTextAnnotation$hv), CONCEPTS.ArbitraryTextAnnotation$hv);
                        SPropertyOperations.assign(annotation, PROPS.text$Fl1W, getMatchingText(pattern));
                        SPropertyOperations.assign(annotation, PROPS.left$Cu1K, _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM);
                        SelectionUtil.selectLabelCellAnSetCaret(editorContext, annotation, "*" + CellIdManager.createPropertyId("text"), -1);

                        SavedCaretPosition caretPosition = new SavedCaretPosition(editorContext);
                        caretPosition.save();
                        Parser parser = new Parser(SNodeOperations.getModel(sourceNode));
                        SNode newTree = parser.processAfterTextInsert(parser.findRootExpression(sourceNode));
                        if (newTree != null) {
                          editorContext.flushEvents();
                          caretPosition.restore();
                        }

                        return null;
                      }
                      public SAbstractConcept getOutputConcept() {
                        return CONCEPTS.ParensExpression$5H;
                      }
                    });
                  }
                }
                return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
                  public boolean accept(TransformationMenuItem it) {
                    return it != null;
                  }
                }).toListSequence();
              } finally {
                _context.getEditorMenuTrace().popTraceInfo();
              }
            }
          }.query(_context)));
        }
      }
      {
        boolean sideEnabled = false;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM;
        if (sideEnabled) {
          ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
            public Iterable<TransformationMenuItem> query(final TransformationMenuContext _context) {
              List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
              _context.getEditorMenuTrace().pushTraceInfo();
              _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.wrap in " + "BinaryExpression", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "6768435242314269968")));
              try {
                if (_context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM) {
                  final SNode sourceNode = new Parser(_context.getModel()).isEndOf(_context.getNode(), _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM, CONCEPTS.MyExpression$hK, null);

                  if (sourceNode != null) {
                    final SAbstractConcept sourceNodeConcept = SNodeOperations.getConcept(sourceNode);
                    SContainmentLink link = sourceNode.getContainmentLink();
                    SAbstractConcept expectedConcept = (link == null ? null : link.getTargetConcept());
                    for (final SAbstractConcept subconcept : GrammarCellsUtil.getVisibleSubconceptsNonAbstract(CONCEPTS.BinaryExpression$$Q, _context.getModel(), BinaryExpression_Editor.class, _context.getEditorContext())) {
                      boolean wrapperAllowed = expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(subconcept), SNodeOperations.asSConcept(expectedConcept));
                      if (wrapperAllowed) {
                        final Iterable<String> matchingText = Sequence.fromIterable(Sequence.<String>singleton(new Object() {
                          public String query(SAbstractConcept subconcept) {
                            return SConceptOperations.conceptAlias(subconcept);
                          }
                        }.query(subconcept))).where(new IWhereFilter<String>() {
                          public boolean accept(String it) {
                            return (it != null && it.length() > 0);
                          }
                        });
                        if (Sequence.fromIterable(matchingText).isNotEmpty()) {
                          boolean sideTransformationEnabled = ConstraintsCanBeFacade.checkCanBeParent(new ContainmentContext.Builder().parentNode(SNodeOperations.getParent(sourceNode)).childConcept(subconcept).link(sourceNode.getContainmentLink()).build()).isEmpty();
                          sideTransformationEnabled &= GrammarCellsUtil.canBeAncestor(SNodeOperations.getParent(sourceNode), subconcept, sourceNode.getContainmentLink());
                          sideTransformationEnabled &= ConstraintsCanBeFacade.checkCanBeChild(new ContainmentContext.Builder().parentNode(SNodeOperations.getParent(sourceNode)).childConcept(subconcept).link(sourceNode.getContainmentLink()).build()).isEmpty();
                          if (sideTransformationEnabled) {
                            ListSequence.fromList(result).addSequence(Sequence.fromIterable(new MultiTextActionItem(matchingText, _context) {

                              public String getDescriptionText(String string) {
                                return NodePresentationUtil.descriptionText(subconcept);
                              }
                              @Override
                              public void execute(@NotNull String pattern) {
                                doSubstitute(_context.getEditorContext(), pattern);
                              }
                              protected SNode doSubstitute(@Nullable EditorContext editorContext, String pattern) {
                                String matchingText = getMatchingText(pattern);
                                SNode wrapper = SNodeOperations.cast(SNodeFactoryOperations.createNewNode(subconcept, null), CONCEPTS.BinaryExpression$$Q);
                                SNodeOperations.replaceWithAnother(sourceNode, wrapper);
                                SLinkOperations.setTarget(wrapper, LINKS.left$6HrV, SNodeOperations.cast(sourceNode, CONCEPTS.MyExpression$hK));


                                SNode newChild = ListSequence.fromList(SNodeOperations.getChildren(wrapper)).findFirst(new IWhereFilter<SNode>() {
                                  public boolean accept(SNode it) {
                                    return it != sourceNode;
                                  }
                                });
                                editorContext.flushEvents();
                                if (newChild == null) {
                                  GrammarCellsUtil.selectCellWithText(editorContext, wrapper, matchingText);
                                } else {
                                  SelectionUtil.selectNode(editorContext, newChild);
                                }

                                SavedCaretPosition caretPosition = new SavedCaretPosition(editorContext);
                                caretPosition.save();
                                Parser parser = new Parser(editorContext.getModel());
                                SNode rebalanced = parser.rebalanceIfRequired(parser.findRootExpression(wrapper));
                                if (rebalanced != null) {
                                  editorContext.flushEvents();
                                  caretPosition.restore();
                                }
                                return newChild;
                              }
                              public SAbstractConcept getOutputConcept() {
                                return subconcept;
                              }
                            }.getMultipleOrSingleAction(false)));
                            addSideTransformRemoval(_context);
                          }
                        }
                      }
                    }
                  }
                }
              } finally {
                _context.getEditorMenuTrace().popTraceInfo();
              }
              return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
                public boolean accept(TransformationMenuItem it) {
                  return it != null;
                }
              }).toListSequence();
            }
          }.query(_context)));
        }
      }
      {
        boolean sideEnabled = false;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM;
        if (sideEnabled) {
          ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
            public Iterable<TransformationMenuItem> query(final TransformationMenuContext _context) {
              List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
              _context.getEditorMenuTrace().pushTraceInfo();
              _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.wrap in " + "BinaryExpression", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "6768435242314270307")));
              try {
                if (_context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM) {
                  final SNode sourceNode = new Parser(_context.getModel()).isEndOf(_context.getNode(), _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM, CONCEPTS.MyExpression$hK, null);

                  if (sourceNode != null) {
                    final SAbstractConcept sourceNodeConcept = SNodeOperations.getConcept(sourceNode);
                    SContainmentLink link = sourceNode.getContainmentLink();
                    SAbstractConcept expectedConcept = (link == null ? null : link.getTargetConcept());
                    for (final SAbstractConcept subconcept : GrammarCellsUtil.getVisibleSubconceptsNonAbstract(CONCEPTS.BinaryExpression$$Q, _context.getModel(), BinaryExpression_Editor.class, _context.getEditorContext())) {
                      boolean wrapperAllowed = expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(subconcept), SNodeOperations.asSConcept(expectedConcept));
                      if (wrapperAllowed) {
                        final Iterable<String> matchingText = Sequence.fromIterable(Sequence.<String>singleton(new Object() {
                          public String query(SAbstractConcept subconcept) {
                            return SConceptOperations.conceptAlias(subconcept);
                          }
                        }.query(subconcept))).where(new IWhereFilter<String>() {
                          public boolean accept(String it) {
                            return (it != null && it.length() > 0);
                          }
                        });
                        if (Sequence.fromIterable(matchingText).isNotEmpty()) {
                          boolean sideTransformationEnabled = ConstraintsCanBeFacade.checkCanBeParent(new ContainmentContext.Builder().parentNode(SNodeOperations.getParent(sourceNode)).childConcept(subconcept).link(sourceNode.getContainmentLink()).build()).isEmpty();
                          sideTransformationEnabled &= GrammarCellsUtil.canBeAncestor(SNodeOperations.getParent(sourceNode), subconcept, sourceNode.getContainmentLink());
                          sideTransformationEnabled &= ConstraintsCanBeFacade.checkCanBeChild(new ContainmentContext.Builder().parentNode(SNodeOperations.getParent(sourceNode)).childConcept(subconcept).link(sourceNode.getContainmentLink()).build()).isEmpty();
                          if (sideTransformationEnabled) {
                            ListSequence.fromList(result).addSequence(Sequence.fromIterable(new MultiTextActionItem(matchingText, _context) {

                              public String getDescriptionText(String string) {
                                return NodePresentationUtil.descriptionText(subconcept);
                              }
                              @Override
                              public void execute(@NotNull String pattern) {
                                doSubstitute(_context.getEditorContext(), pattern);
                              }
                              protected SNode doSubstitute(@Nullable EditorContext editorContext, String pattern) {
                                String matchingText = getMatchingText(pattern);
                                SNode wrapper = SNodeOperations.cast(SNodeFactoryOperations.createNewNode(subconcept, null), CONCEPTS.BinaryExpression$$Q);
                                SNodeOperations.replaceWithAnother(sourceNode, wrapper);
                                SLinkOperations.setTarget(wrapper, LINKS.right$4iAC, SNodeOperations.cast(sourceNode, CONCEPTS.MyExpression$hK));


                                SNode newChild = ListSequence.fromList(SNodeOperations.getChildren(wrapper)).findFirst(new IWhereFilter<SNode>() {
                                  public boolean accept(SNode it) {
                                    return it != sourceNode;
                                  }
                                });
                                editorContext.flushEvents();
                                if (newChild == null) {
                                  GrammarCellsUtil.selectCellWithText(editorContext, wrapper, matchingText);
                                } else {
                                  SelectionUtil.selectNode(editorContext, newChild);
                                }

                                SavedCaretPosition caretPosition = new SavedCaretPosition(editorContext);
                                caretPosition.save();
                                Parser parser = new Parser(editorContext.getModel());
                                SNode rebalanced = parser.rebalanceIfRequired(parser.findRootExpression(wrapper));
                                if (rebalanced != null) {
                                  editorContext.flushEvents();
                                  caretPosition.restore();
                                }
                                return newChild;
                              }
                              public SAbstractConcept getOutputConcept() {
                                return subconcept;
                              }
                            }.getMultipleOrSingleAction(false)));
                            addSideTransformRemoval(_context);
                          }
                        }
                      }
                    }
                  }
                }
              } finally {
                _context.getEditorMenuTrace().popTraceInfo();
              }
              return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
                public boolean accept(TransformationMenuItem it) {
                  return it != null;
                }
              }).toListSequence();
            }
          }.query(_context)));
        }
      }
      {
        boolean sideEnabled = false;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM;
        if (sideEnabled) {
          ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
            public Iterable<TransformationMenuItem> query(final TransformationMenuContext _context) {
              List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
              _context.getEditorMenuTrace().pushTraceInfo();
              _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.wrap in " + "VariableDeclaration", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "1986727169827240901")));
              try {
              } finally {
                _context.getEditorMenuTrace().popTraceInfo();
              }
              return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
                public boolean accept(TransformationMenuItem it) {
                  return it != null;
                }
              }).toListSequence();
            }
          }.query(_context)));
        }
      }
      {
        boolean sideEnabled = false;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM;
        if (sideEnabled) {
          ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
            public Iterable<TransformationMenuItem> query(final TransformationMenuContext _context) {
              List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
              _context.getEditorMenuTrace().pushTraceInfo();
              _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.wrap in " + "Type", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "1986727169827462157")));
              try {
              } finally {
                _context.getEditorMenuTrace().popTraceInfo();
              }
              return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
                public boolean accept(TransformationMenuItem it) {
                  return it != null;
                }
              }).toListSequence();
            }
          }.query(_context)));
        }
      }
      {
        boolean sideEnabled = false;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM;
        sideEnabled |= _context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM;
        if (sideEnabled) {
          ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
            public Iterable<TransformationMenuItem> query(final TransformationMenuContext _context) {
              _context.getEditorMenuTrace().pushTraceInfo();
              _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("grammar.optional in " + "IfStatement", new SNodePointer("r:cd73f1d4-bc01-4075-b956-fe7c8e7e4547(SoSeL21.editor)", "7661459130991941773")));
              try {
                SNode sourceNode = _context.getNode();
                if (!(SNodeOperations.isInstanceOf(sourceNode, CONCEPTS.IfStatement$tK))) {
                  return Sequence.fromIterable(Collections.<TransformationMenuItem>emptyList());
                }
                SNode parentNode = SNodeOperations.cast(sourceNode, CONCEPTS.IfStatement$tK);
                final SContainmentLink link = LINKS.else$IzMC;
                SNode currentChild = SLinkOperations.getTarget(parentNode, LINKS.else$IzMC);
                return new SubstituteItemsCollector(parentNode, currentChild, link, _context.getEditorContext(), null).collect();
              } finally {
                _context.getEditorMenuTrace().popTraceInfo();
              }
            }
          }.query(_context)));
        }
      }
    } finally {
      _context.getEditorMenuTrace().popTraceInfo();
    }

    return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
      public boolean accept(TransformationMenuItem it) {
        return it != null;
      }
    }).toListSequence();
  }

  @Override
  public List<SubstituteAction> getConstantReplaceActions(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context, final List<IToken> elementsBefore, final List<IToken> elementsAfter) {
    final List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());

    // BinaryExpression_Editor 
    for (final SAbstractConcept subconcept : GrammarCellsUtil.getVisibleSubconceptsNonAbstract(CONCEPTS.BinaryExpression$$Q, _context.getModel(), BinaryExpression_Editor.class)) {

      final Iterable<String> matchingText = Sequence.fromIterable(Sequence.<String>singleton(new Object() {
        public String query(SAbstractConcept subconcept) {
          return SConceptOperations.conceptAlias(subconcept);
        }
      }.query(subconcept))).where(new IWhereFilter<String>() {
        public boolean accept(String it) {
          return (it != null && it.length() > 0);
        }
      });
      boolean conceptAllowed = SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(subconcept), SNodeOperations.asSConcept(_context.getChildConcept()));
      SNode sourceNode = _context.getCurrentTargetNode();
      boolean transformationEnabled = ConstraintsCanBeFacade.checkCanBeParent(new ContainmentContext.Builder().parentNode(_context.getParentNode()).childConcept(subconcept).link(sourceNode.getContainmentLink()).build()).isEmpty();
      transformationEnabled &= GrammarCellsUtil.canBeAncestor(_context.getParentNode(), subconcept, sourceNode.getContainmentLink());
      if (Sequence.fromIterable(matchingText).isNotEmpty() && conceptAllowed && transformationEnabled) {

        final List<ISymbol> beforeMatchers = ListSequence.fromList(new ArrayList<ISymbol>());
        final List<ISymbol> afterMatchers = ListSequence.fromList(new ArrayList<ISymbol>());
        ListSequence.fromList(beforeMatchers).addElement(new ChildSymbol(LINKS.left$6HrV));
        ListSequence.fromList(afterMatchers).addElement(new ChildSymbol(LINKS.right$4iAC));
        final SyntaxMatcher matcher = new SyntaxMatcher();
        if (matcher.matches(elementsBefore, beforeMatchers, false, null) && matcher.matches(elementsAfter, afterMatchers, false, null)) {

          ListSequence.fromList(result).addElement(new MultiTextSubsituteAction(_context.getParentNode(), matchingText) {
            public String getDescriptionText(String pattern) {
              String shortDescription = subconcept.getShortDescription();
              return (shortDescription != null ? shortDescription : subconcept.getName());
            }
            @Override
            protected SNode doSubstitute(@Nullable EditorContext editorContext, String pattern) {
              SNode newNode = SNodeFactoryOperations.createNewNode(subconcept, null);

              matcher.matches(elementsBefore, beforeMatchers, true, newNode);
              matcher.matches(elementsAfter, afterMatchers, true, newNode);

              _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), newNode, editorContext);

              GrammarCellsUtil.selectCellWithText(editorContext, newNode, getMatchingText(pattern));

              SavedCaretPosition caretPosition = new SavedCaretPosition(editorContext);
              caretPosition.save();
              Parser parser = new Parser(editorContext.getModel());
              SNode expressionRoot = parser.findRootExpression(newNode);
              parser.rebalanceIfRequired(expressionRoot);
              caretPosition.restore();

              return null;
            }
            @Override
            public SNode getOutputConcept() {
              return SNodeOperations.asNode(subconcept);
            }
          });
        }
      }
    }



    // Type_Editor 
    for (final SAbstractConcept subconcept : GrammarCellsUtil.getVisibleSubconceptsNonAbstract(CONCEPTS.Type$vA, _context.getModel(), Type_Editor.class)) {

      final Iterable<String> matchingText = Sequence.fromIterable(Sequence.<String>singleton(new Object() {
        public String query(SAbstractConcept subconcept) {
          return SConceptOperations.conceptAlias(subconcept);
        }
      }.query(subconcept))).where(new IWhereFilter<String>() {
        public boolean accept(String it) {
          return (it != null && it.length() > 0);
        }
      });
      boolean conceptAllowed = SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(subconcept), SNodeOperations.asSConcept(_context.getChildConcept()));
      SNode sourceNode = _context.getCurrentTargetNode();
      boolean transformationEnabled = ConstraintsCanBeFacade.checkCanBeParent(new ContainmentContext.Builder().parentNode(_context.getParentNode()).childConcept(subconcept).link(sourceNode.getContainmentLink()).build()).isEmpty();
      transformationEnabled &= GrammarCellsUtil.canBeAncestor(_context.getParentNode(), subconcept, sourceNode.getContainmentLink());
      if (Sequence.fromIterable(matchingText).isNotEmpty() && conceptAllowed && transformationEnabled) {

        final List<ISymbol> beforeMatchers = ListSequence.fromList(new ArrayList<ISymbol>());
        final List<ISymbol> afterMatchers = ListSequence.fromList(new ArrayList<ISymbol>());
        final SyntaxMatcher matcher = new SyntaxMatcher();
        if (matcher.matches(elementsBefore, beforeMatchers, false, null) && matcher.matches(elementsAfter, afterMatchers, false, null)) {

          ListSequence.fromList(result).addElement(new MultiTextSubsituteAction(_context.getParentNode(), matchingText) {
            public String getDescriptionText(String pattern) {
              String shortDescription = subconcept.getShortDescription();
              return (shortDescription != null ? shortDescription : subconcept.getName());
            }
            @Override
            protected SNode doSubstitute(@Nullable EditorContext editorContext, String pattern) {
              SNode newNode = SNodeFactoryOperations.createNewNode(subconcept, null);

              matcher.matches(elementsBefore, beforeMatchers, true, newNode);
              matcher.matches(elementsAfter, afterMatchers, true, newNode);

              _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), newNode, editorContext);

              GrammarCellsUtil.selectCellWithText(editorContext, newNode, getMatchingText(pattern));

              SavedCaretPosition caretPosition = new SavedCaretPosition(editorContext);
              caretPosition.save();
              Parser parser = new Parser(editorContext.getModel());
              SNode expressionRoot = parser.findRootExpression(newNode);
              parser.rebalanceIfRequired(expressionRoot);
              caretPosition.restore();

              return null;
            }
            @Override
            public SNode getOutputConcept() {
              return SNodeOperations.asNode(subconcept);
            }
          });
        }
      }
    }




    return ListSequence.fromList(result).where(new IWhereFilter<SubstituteAction>() {
      public boolean accept(SubstituteAction it) {
        return it != null;
      }
    }).toListSequence();
  }

  @Override
  public List<IRule> getRules(final SModel contextModel) {
    final List<IRule> rules = ListSequence.fromList(new ArrayList<IRule>());

    final Set<SLanguage> visibleLanguages = GrammarCellsUtil.getVisibleLanguages(contextModel);

    {
      final List<SConcept> subconcepts = GrammarCellsUtil.getVisibleSubconceptsNonAbstract(CONCEPTS.NumberLiteral$kL, visibleLanguages);
      for (final SAbstractConcept subconcept : subconcepts) {
        ListSequence.fromList(rules).addElement(new AbstractRule() {
          private List<ISymbol> symbols = ListSequence.fromList(new ArrayList<ISymbol>());
          {
            ListSequence.fromList(symbols).addElement(new PropertySymbol(CONCEPTS.NumberLiteral$kL, PROPS.value$qBvE));
            symbols = ListSequence.fromList(symbols).where(new IWhereFilter<ISymbol>() {
              public boolean accept(ISymbol it) {
                return it != null;
              }
            }).toListSequence();
          }
          @Override
          public List<ISymbol> getSymbols() {
            return symbols;
          }
          @Override
          public SAbstractConcept getOutputConcept() {
            return subconcept;
          }
          @Override
          public SAbstractConcept getDefinedForConcept() {
            return CONCEPTS.NumberLiteral$kL;
          }
          @Override
          public String toString() {
            return subconcept.getName();
          }
        });
      }
    }
    {
      final List<SConcept> subconcepts = GrammarCellsUtil.getVisibleSubconceptsNonAbstract(CONCEPTS.ParensExpression$5H, visibleLanguages);
      for (final SAbstractConcept subconcept : subconcepts) {
        ListSequence.fromList(rules).addElement(new AbstractRule() {
          private List<ISymbol> symbols = ListSequence.fromList(new ArrayList<ISymbol>());
          {
            ListSequence.fromList(symbols).addElement(new ConstantSymbol("("));
            ListSequence.fromList(symbols).addElement(new ChildSymbol(LINKS.exp$vTvY));
            ListSequence.fromList(symbols).addElement(new ConstantSymbol(")"));
            symbols = ListSequence.fromList(symbols).where(new IWhereFilter<ISymbol>() {
              public boolean accept(ISymbol it) {
                return it != null;
              }
            }).toListSequence();
          }
          @Override
          public List<ISymbol> getSymbols() {
            return symbols;
          }
          @Override
          public SAbstractConcept getOutputConcept() {
            return subconcept;
          }
          @Override
          public SAbstractConcept getDefinedForConcept() {
            return CONCEPTS.ParensExpression$5H;
          }
          @Override
          public String toString() {
            return subconcept.getName();
          }
        });
      }
    }
    {
      final List<SConcept> subconcepts = GrammarCellsUtil.getVisibleSubconceptsNonAbstract(CONCEPTS.BinaryExpression$$Q, visibleLanguages);
      for (final SAbstractConcept subconcept : subconcepts) {
        ListSequence.fromList(rules).addElement(new AbstractRule() {
          private List<ISymbol> symbols = ListSequence.fromList(new ArrayList<ISymbol>());
          {
            ListSequence.fromList(symbols).addElement(new ChildSymbol(LINKS.left$6HrV));
            ListSequence.fromList(symbols).addElement(new ConstantSymbol(new Object() {
              public String query(SAbstractConcept subconcept) {
                return SConceptOperations.conceptAlias(subconcept);
              }
            }.query(subconcept)));
            ListSequence.fromList(symbols).addElement(new ChildSymbol(LINKS.right$4iAC));
            symbols = ListSequence.fromList(symbols).where(new IWhereFilter<ISymbol>() {
              public boolean accept(ISymbol it) {
                return it != null;
              }
            }).toListSequence();
          }
          @Override
          public List<ISymbol> getSymbols() {
            return symbols;
          }
          @Override
          public SAbstractConcept getOutputConcept() {
            return subconcept;
          }
          @Override
          public SAbstractConcept getDefinedForConcept() {
            return CONCEPTS.BinaryExpression$$Q;
          }
          @Override
          public String toString() {
            return subconcept.getName();
          }
        });
      }
    }

    return rules;
  }

  private static final class PROPS {
    /*package*/ static final SProperty value$qBvE = MetaAdapterFactory.getProperty(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0xc8c4a8335f33678L, 0x17b38e97ea6153e9L, "value");
    /*package*/ static final SProperty text$Fl1W = MetaAdapterFactory.getProperty(0xb4f35ed845af4efaL, 0xabe400ac26956e69L, 0x468dcccb641e8fb9L, 0x468dcccb641e99b6L, "text");
    /*package*/ static final SProperty left$Cu1K = MetaAdapterFactory.getProperty(0xb4f35ed845af4efaL, 0xabe400ac26956e69L, 0x468dcccb641e8fb9L, 0x468dcccb641e9989L, "left");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept NumberLiteral$kL = MetaAdapterFactory.getConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0xc8c4a8335f33678L, "SoSeL21.structure.NumberLiteral");
    /*package*/ static final SInterfaceConcept MyExpression$hK = MetaAdapterFactory.getInterfaceConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x17b38e97ea5d2c32L, "SoSeL21.structure.MyExpression");
    /*package*/ static final SConcept BinaryExpression$$Q = MetaAdapterFactory.getConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x17b38e97ea60c54bL, "SoSeL21.structure.BinaryExpression");
    /*package*/ static final SConcept Type$vA = MetaAdapterFactory.getConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x1b9245d5b72eac8fL, "SoSeL21.structure.Type");
    /*package*/ static final SConcept VariableDeclaration$j6 = MetaAdapterFactory.getConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254c582bL, "SoSeL21.structure.VariableDeclaration");
    /*package*/ static final SConcept ArbitraryTextAnnotation$hv = MetaAdapterFactory.getConcept(0xb4f35ed845af4efaL, 0xabe400ac26956e69L, 0x468dcccb641e8fb9L, "com.mbeddr.mpsutil.grammarcells.runtimelang.structure.ArbitraryTextAnnotation");
    /*package*/ static final SConcept ParensExpression$5H = MetaAdapterFactory.getConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254a5371L, "SoSeL21.structure.ParensExpression");
    /*package*/ static final SConcept IfStatement$tK = MetaAdapterFactory.getConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c8da65eL, "SoSeL21.structure.IfStatement");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink left$6HrV = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x17b38e97ea60c54bL, 0x17b38e97ea60c54eL, "left");
    /*package*/ static final SContainmentLink right$4iAC = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x17b38e97ea60c54bL, 0x554824d49f380903L, "right");
    /*package*/ static final SContainmentLink type$Kukc = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254c582bL, 0x1b9245d5b72b7bb7L, "type");
    /*package*/ static final SContainmentLink else$IzMC = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x3d238acb0c8da65eL, 0x3d238acb0c8da6fdL, "else");
    /*package*/ static final SContainmentLink exp$vTvY = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254a5371L, 0x7f8c5814254c57b1L, "exp");
  }
}
