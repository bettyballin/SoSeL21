package SoSeL21.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import SoSeL21.interpreter.plugin.EvalHelper;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;

public final class InterpretExpression_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private static final Logger LOG = LogManager.getLogger(InterpretExpression_Intention.class);
  private Collection<IntentionExecutable> myCachedExecutable;
  public InterpretExpression_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:0b87e836-8d7c-47a7-81a1-69ae94fe1247(SoSeL21.intentions)", "1707865466829121948"));
  }
  @Override
  public String getPresentation() {
    return "InterpretExpression";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Interpret Expression";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      String eval = EvalHelper.eval(node);
      Messages.showInfoMessage(eval, "Interpreted");
      LoggingRuntime.logMsgView(Level.INFO, "Interpreted " + eval, InterpretExpression_Intention.class, null, null);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return InterpretExpression_Intention.this;
    }
  }
}
