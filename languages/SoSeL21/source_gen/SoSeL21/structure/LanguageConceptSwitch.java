package SoSeL21.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AddStatement = 0;
  public static final int BinaryArithmeticExpression = 1;
  public static final int BinaryComparisonExpression = 2;
  public static final int BinaryExpression = 3;
  public static final int BooleanLiteral = 4;
  public static final int BooleanType = 5;
  public static final int DivideStatement = 6;
  public static final int ElseIfStatement = 7;
  public static final int ElseStatement = 8;
  public static final int EmptyStatement = 9;
  public static final int EqualExpression = 10;
  public static final int ExpressionStatement = 11;
  public static final int GreaterExpression = 12;
  public static final int IElseStatement = 13;
  public static final int IfStatement = 14;
  public static final int IntegerType = 15;
  public static final int LessExpression = 16;
  public static final int MultiplyStatement = 17;
  public static final int MyExpression = 18;
  public static final int NumberLiteral = 19;
  public static final int ParensExpression = 20;
  public static final int SoSeWorksheet = 21;
  public static final int Statement = 22;
  public static final int SubtractStatement = 23;
  public static final int Type = 24;
  public static final int VariableDeclaration = 25;
  public static final int VariableReference = 26;
  public static final int WhileStatement = 27;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x525ac69d02684eb4L, 0x9478ecf995bf5927L);
    builder.put(0x17b38e97ea7f627eL, AddStatement);
    builder.put(0x554824d49f38b079L, BinaryArithmeticExpression);
    builder.put(0x7f8c5814254c57b7L, BinaryComparisonExpression);
    builder.put(0x17b38e97ea60c54bL, BinaryExpression);
    builder.put(0x1b9245d5b7426cfcL, BooleanLiteral);
    builder.put(0x1b9245d5b7346435L, BooleanType);
    builder.put(0x554824d49f2c6ac5L, DivideStatement);
    builder.put(0x3d238acb0c98656fL, ElseIfStatement);
    builder.put(0x3d238acb0c8da702L, ElseStatement);
    builder.put(0x7f8c5814254c57e9L, EmptyStatement);
    builder.put(0x7f8c5814254c57ccL, EqualExpression);
    builder.put(0x7f8c5814254c57fcL, ExpressionStatement);
    builder.put(0x7f8c5814253c69bbL, GreaterExpression);
    builder.put(0x6a52f87ccbfc3d36L, IElseStatement);
    builder.put(0x3d238acb0c8da65eL, IfStatement);
    builder.put(0x1b9245d5b72b744bL, IntegerType);
    builder.put(0x7f8c5814254c57b8L, LessExpression);
    builder.put(0x554824d49f2c6aadL, MultiplyStatement);
    builder.put(0x17b38e97ea5d2c32L, MyExpression);
    builder.put(0xc8c4a8335f33678L, NumberLiteral);
    builder.put(0x7f8c5814254a5371L, ParensExpression);
    builder.put(0x3538d07f0ac55237L, SoSeWorksheet);
    builder.put(0x3538d07f0ac55234L, Statement);
    builder.put(0x17b38e97ea80e42cL, SubtractStatement);
    builder.put(0x1b9245d5b72eac8fL, Type);
    builder.put(0x7f8c5814254c582bL, VariableDeclaration);
    builder.put(0x3538d07f0ac5551eL, VariableReference);
    builder.put(0x65891563316baffbL, WhileStatement);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
