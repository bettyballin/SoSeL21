package SoSeL21.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import SoSeL21.interpreter.plugin.EvalHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_VariableDeclaration_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_VariableDeclaration_NonTypesystemRule() {
  }
  public void applyRule(final SNode d, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    String result = EvalHelper.eval(SNodeOperations.getParent(SLinkOperations.getTarget(d, LINKS.initializer$VrMu)));
    if (SNodeOperations.getConcept(SLinkOperations.getTarget(d, LINKS.type$Kukc)).getConceptAlias() == "int") {
      if (result == "true" || result == "false") {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(d, "Value is not an integer:  " + result, "r:69300e82-0e15-404d-87f2-8e5784afc430(SoSeL21.typesystem)", "1986727169838774046", null, errorTarget);
        }
      }
    }
    if (SNodeOperations.getConcept(SLinkOperations.getTarget(d, LINKS.type$Kukc)).getConceptAlias() == "boolean") {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(d, "Value is not a boolean: " + Integer.valueOf(result), "r:69300e82-0e15-404d-87f2-8e5784afc430(SoSeL21.typesystem)", "1986727169828907788", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.VariableDeclaration$j6;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink initializer$VrMu = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254c582bL, 0x7f8c5814254c5852L, "initializer");
    /*package*/ static final SContainmentLink type$Kukc = MetaAdapterFactory.getContainmentLink(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254c582bL, 0x1b9245d5b72b7bb7L, "type");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept VariableDeclaration$j6 = MetaAdapterFactory.getConcept(0x525ac69d02684eb4L, 0x9478ecf995bf5927L, 0x7f8c5814254c582bL, "SoSeL21.structure.VariableDeclaration");
  }
}
